default namespace = "http://histvv.uni-leipzig.de/ns/2007"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace s = "http://purl.oclc.org/dsdl/schematron"

s:ns [ prefix = "v" uri = "http://histvv.uni-leipzig.de/ns/2007" ]
start = vv | dozentenliste
xml.lang.attribute =
  attribute xml:lang {
    xsd:language { length = "2" }
  }
xml.id.attribute = attribute xml:id { xsd:ID }
basic.attributes = xml.id.attribute?
common.attributes = basic.attributes, xml.lang.attribute?

## 
##       macht kenntlich, daß der Text des aktuellen Elements (thema,
##       titel) nur im Kontext verständlich ist und bei der Ausgabe
##       ggf. um diesen ergänzt werden muß
##     
kontext.attribute =
  # TODO: Der momentane Wert "sachgruppe" soll später durch
  # XPath-Ausdrücke ersetzt werden, die das Kontext-Element
  # referenzieren.
  attribute kontext { "sachgruppe" }
titel = element titel { common.attributes, text-content }

## 
##       Wurzelelement für ein Vorlesungsverzeichnis
##     
vv =
  element vv {
    common.attributes,
    
    ##
    attribute id {
      xsd:NMTOKEN { pattern = "[a-z]+-[0-9]{4}-(ws|ss)" }
    }?,
    kopf,
    seite?,
    titel,
    element untertitel { common.attributes, text-content }?,
    ((sachgruppe | übersicht)+ & absatz* & seite* & trennlinie*),
    ocr?
  }

## Metadaten
kopf =
  element kopf {
    element quelle { text }?
    & universität?
    & element semester { "Winter" | "Sommer" }
    & element beginn { partial-date }
    & element ende { partial-date }
    & status
  }
universität = element universität { text }
status =
  element status {
    attribute komplett { "ja" }?,
    transkribent,
    korrigiert*
  }
transkribent =
  [
    s:pattern [
      id = "transkribent"
      "\x{a}" ~
      "        "
      s:rule [
        context = "v:transkribent"
        "\x{a}" ~
        "          "
        s:assert [
          test = "not(normalize-space(.) = '')"
          "\x{a}" ~
          "            Bitte Transkribenten eintragen.\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "      "
    ]
  ]
  element transkribent { text }
korrigiert =
  element korrigiert {
    element durch { text },
    element am { text },
    element anmerkungen { text }?
  }

## 
##       Hauptgliederung späterer Vorlesungsverzeichnisse ("Systematische
##       Übersicht", "Übersicht nach der Ordnung der Lehrer", "Übersicht
##       nach Tagesstunden" usw.)
##     
übersicht =
  element übersicht {
    common.attributes,
    titel?,
    (sachgruppe* & absatz* & seite* & trennlinie*)
  }

## 
##       Gliederung der Fachgebiete, Themen etc.
##     
sachgruppe =
  [
    s:pattern [
      id = "sachgruppe"
      "\x{a}" ~
      "        "
      s:rule [
        context = "v:sachgruppe"
        "\x{a}" ~
        "          "
        s:assert [
          test =
            "v:sachgruppe                           or v:veranstaltung                           or v:veranstaltungsgruppe                           or v:veranstaltungsverweis                           or v:absatz                           or .//v:siehe"
          "\x{a}" ~
          "            Sachgruppe muß Veranstaltungsangaben, weitere Sachgruppen\x{a}" ~
          "            oder Verweis auf andere Sachgruppe enthalten.\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "      "
    ]
  ]
  element sachgruppe {
    common.attributes,
    attribute fakultät {
      ("Philosophie" | "Theologie" | "Jura" | "Medizin")
      >> s:pattern [
           id = "fakultät-jura"
           "\x{a}" ~
           "            "
           s:rule [
             context = "v:sachgruppe[@fakultät='Jura']"
             "\x{a}" ~
             "              "
             s:assert [
               test = "not(count(//v:sachgruppe[@fakultät='Jura']) > 1)"
               "\x{a}" ~
               '                Fakultät "Jura" mehr als einmal ausgezeichnet.\x{a}' ~
               "              "
             ]
             "\x{a}" ~
             "            "
           ]
           "\x{a}" ~
           "          "
         ]
      >> s:pattern [
           id = "fakultät-medizin"
           "\x{a}" ~
           "            "
           s:rule [
             context = "v:sachgruppe[@fakultät='Medizin']"
             "\x{a}" ~
             "              "
             s:assert [
               test =
                 "not(count(//v:sachgruppe[@fakultät='Medizin']) > 1)"
               "\x{a}" ~
               '                Fakultät "Medizin" mehr als einmal ausgezeichnet.\x{a}' ~
               "              "
             ]
             "\x{a}" ~
             "            "
           ]
           "\x{a}" ~
           "          "
         ]
      >> s:pattern [
           id = "fakultät-philosophie"
           "\x{a}" ~
           "            "
           s:rule [
             context = "v:sachgruppe[@fakultät='Philosophie']"
             "\x{a}" ~
             "              "
             s:assert [
               test =
                 "not(count(//v:sachgruppe[@fakultät='Philosophie']) > 1)"
               "\x{a}" ~
               '                Fakultät "Philosophie" mehr als einmal ausgezeichnet.\x{a}' ~
               "              "
             ]
             "\x{a}" ~
             "            "
           ]
           "\x{a}" ~
           "          "
         ]
      >> s:pattern [
           id = "fakultät-theologie"
           "\x{a}" ~
           "            "
           s:rule [
             context = "v:sachgruppe[@fakultät='Theologie']"
             "\x{a}" ~
             "              "
             s:assert [
               test =
                 "not(count(//v:sachgruppe[@fakultät='Theologie']) > 1)"
               "\x{a}" ~
               '                Fakultät "Theologie" mehr als einmal ausgezeichnet.\x{a}' ~
               "              "
             ]
             "\x{a}" ~
             "            "
           ]
           "\x{a}" ~
           "          "
         ]
    }?,
    sachgruppentitel?,
    (# Um das Editieren zu erleichtern, wird das Vorhandensein
     # entweder einer <veranstaltung> oder einer <sachgruppe> an
     # dieser Stelle nicht erzwungen.
     sachgruppe*
     & veranstaltung*
     & veranstaltungsverweis*
     & veranstaltungsgruppe*
     & absatz*
     & seite*
     & trennlinie*)
  }
sachgruppentitel =
  element titel { common.attributes, kontext.attribute?, text-content }
model.veranstaltung =
  text-content
  & # <dozent> bzw. <ders> sind optional um das Editieren zu
    # erleichtern. TODO: Eine Schematron-Regel könnte auf fehlende
    # Dozentenangaben hinweisen.
    dozent*
  & ders?
  & thema*
  & zeit*
  & modus*
  & gebühr*

## 
##       einzelne Lehrveranstaltung
##     
veranstaltung =
  element veranstaltung {
    common.attributes,
    # Die folgenden Attribute dienen der Angabe von
    # Veranstaltungsdaten in Fällen, wo diese nicht über Elemente
    # auszeichenbar sind sondern aus dem Kontext erschlossen
    # werden. TODO: Eine konsistente Verwendung sollte über
    # Schematron-Regeln sichergestellt werden.
    attribute dozent { text }?,
    attribute gebühr { text }?,
    attribute modus { text }?,
    attribute thema { text }?,
    attribute zeit { text }?,
    model.veranstaltung
  }

## 
##       Gruppierung von Veranstaltungsangaben; die enthaltenen
##       Veranstaltungen erben Daten der Gruppe
##     
veranstaltungsgruppe =
  [
    s:pattern [
      id = "veranstaltungsgruppe"
      "\x{a}" ~
      "        "
      s:rule [
        context = "v:veranstaltungsgruppe"
        "\x{a}" ~
        "          "
        s:assert [
          test =
            "count(v:veranstaltung) +                           count(v:veranstaltungsgruppe) +                           count(v:veranstaltungsverweis)  > 1"
          "\x{a}" ~
          "            Veranstaltungsgruppe mit weniger als zwei Veranstaltungen\x{a}" ~
          "            ist nicht sinnvoll.\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "      "
    ]
  ]
  element veranstaltungsgruppe {
    common.attributes
    & model.veranstaltung
    & veranstaltung*
    & veranstaltungsverweis*
    & veranstaltungsgruppe*
  }

## 
##       Verweis auf Veranstaltungsangabe an anderem Ort
##     
veranstaltungsverweis =
  element veranstaltungsverweis {
    common.attributes,
    attribute ref { xsd:IDREF }?,
    model.veranstaltung
  }

## 
##       Angaben zum Dozenten
##     
dozent =
  element dozent {
    common.attributes
    & attribute ref { text }?
    & # Um das Editieren zu erleichtern sind alle Kindelemente
      # optional. TODO: Eine Schematron-Regel könnte auf
      # unvollständige Dozentenangaben hinweisen.
      model.text
    & nachname?
    & vorname?
    & nachnamenpräfix?
    & grad*
    & funktion*
  }

## 
##       Nachname
##     
nachname = element nachname { common.attributes, model.text }

## 
##       Vorname
##     
vorname = element vorname { common.attributes, model.text }

## 
##       "von", "van", "de" ...
##     
nachnamenpräfix = element nachnamenpräfix { common.attributes, text }

## 
##       akademischer Grad
##     
grad = element grad { common.attributes, model.text }

## 
##       akademische Funktion
##     
funktion = element funktion { common.attributes, model.text }

## 
##       Auszeichnung für Verweise auf vorhergehenden Dozenten:
##       "Derselbe", "Ders." etc.
##     
ders =
  element ders {
    common.attributes,
    attribute ref { xsd:NMTOKEN }?,
    model.text
  }

## 
##       Auszeichnung für Text, der das Thema der Lehrveranstaltung
##       beschreibt
##     
thema =
  element thema {
    common.attributes
    & kontext.attribute?
    & text-content
    & autor*
    & schrift*
  }

## 
##       in Lehrveranstaltungen behandelte oder verwendete Autoren
##     
autor = element autor { common.attributes, model.text }

## 
##       in Lehrveranstaltungen behandelte oder verwendete Texte
##     
schrift =
  element schrift {
    common.attributes & model.text & titel? & autor? & notiz*
  }

## 
##       zur Auszeichnung von Zeitangaben
##     
zeit = element zeit { common.attributes, text-content }

## 
##       zur Auszeichnung von Ortsangaben
##     
ort = element ort { common.attributes, model.text }

## 
##       z.B. "privatissime" / "öffentlich"
##     
modus = element modus { common.attributes, model.text }

## 
##       Angaben zur Bezahlung einer Lehrveranstaltung,
##       z.B. "unentgeltlich"
##     
gebühr = element gebühr { common.attributes, model.text }

## 
##       Textabsatz
##     
absatz =
  element absatz {
    common.attributes,
    (text-content & veranstaltung* & veranstaltungsverweis* & dozent*)
  }

##
model.text = text & seite* & sic* & korrektur*

##
text-content =
  model.text
  & notiz*
  & siehe*
  & ort*
  & scil*
  & antiqua*
  & gesperrt*
  & kursiv*

## Seitenmarkierung
[
  # Dass sich Elementtext und nr-Attribut gegenseitig
  # ausschliessen, wird hier als Schematron-Regel festgehalten.
  # Bei Implementierung als <choice> im RNG läßt sich das Attribut
  # im XmlMind nicht setzen.
  
  s:pattern [
    id = "seite"
    "\x{a}" ~
    "      "
    s:rule [
      context = "v:seite"
      "\x{a}" ~
      "        "
      s:assert [
        test = "@nr or not(text() = '')"
        "\x{a}" ~
        "          Seitenzahl fehlt.\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "        "
      s:assert [
        test = "not(@nr and not(text() = ''))"
        "\x{a}" ~
        "          Die Seitenzahl muss entweder im Text oder im Attribut 'nr'\x{a}" ~
        "          angegeben werden, nicht in beiden.\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "      "
    ]
    "\x{a}" ~
    "    "
  ]
]
seite =
  element seite {
    basic.attributes,
    
    ## implizite Seitenzahl bei nichtpaginierten Seiten
    attribute nr {
      xsd:positiveInteger
      | xsd:NMTOKEN { pattern = "[a-z0-9]+" }
    }?,
    (empty | xsd:positiveInteger)
  }

## 
##       zur Auszeichnung von Verweisen auf Sachgruppen oder
##       Veranstaltungen innerhalb des gleichen Dokuments
##       (z.B. "s. Dogmatik")
##     
siehe =
  element siehe {
    common.attributes,
    attribute ref { xsd:IDREF }?,
    (model.text & notiz* & antiqua* & gesperrt* & kursiv*)
  }

## 
##       zur Textklärung
##     
scil =
  [
    s:pattern [
      id = "scil"
      "\x{a}" ~
      "        "
      s:rule [
        context = "v:scil"
        "\x{a}" ~
        "          "
        s:assert [
          test = "not(@text='???')"
          "\x{a}" ~
          "            Attribut 'text' enthält Platzhaltertext ('???').\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "      "
    ]
  ]
  element scil {
    common.attributes,
    attribute text { text },
    model.text
  }

##
notiz =
  element notiz {
    common.attributes,
    attribute betreff { text }?,
    (model.text & antiqua* & gesperrt* & kursiv*)
  }

## Hervorhebung, antiqua
antiqua = element antiqua { common.attributes, model.text }

## Hervorhebung, gesperrt
gesperrt = element gesperrt { common.attributes, model.text }

## Hervorhebung, kursiv
kursiv = element kursiv { common.attributes, model.text }

## horizontale Linie
trennlinie = element trennlinie { basic.attributes, empty }

## 
##       Markierung ungewöhnlicher Schreibweisen im Original
##     
sic = element sic { basic.attributes, text }

## 
##       Auszeichnung von Korrekturen bei Transkription
##     
korrektur =
  [
    s:pattern [
      id = "korrektur"
      "\x{a}" ~
      "        "
      s:rule [
        context = "v:korrektur"
        "\x{a}" ~
        "          "
        s:assert [
          test = "not(. = '' and not(@original))"
          "\x{a}" ~
          "            Leeres Element 'korrektur' ohne Angabe des Originaltexts\x{a}" ~
          "            ist nicht zulässig.\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "          "
        s:assert [
          test = "not(@original and @original='')"
          "\x{a}" ~
          "            Attribut 'original' darf nicht leer sein.\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      "\x{a}" ~
      "      "
    ]
  ]
  element korrektur {
    basic.attributes,
    
    ## 
    ##           enthält den Originaltext, bleibt leer bei Ergänzungen
    ##         
    (attribute original { text }?),
    text
  }

## 
##       Datumsangabe, die mindestens das Jahr enthalten muss
##     
partial-date = jahr, (monat, tag?)?

## Jahreszahl
jahr =
  element jahr {
    basic.attributes,
    xsd:positiveInteger { pattern = "[0-9]{4}" }
  }

## Monatszahl
monat =
  element monat {
    basic.attributes,
    xsd:positiveInteger { minInclusive = "1" maxInclusive = "12" }
  }

## Tag des Monats
tag =
  element tag {
    basic.attributes,
    xsd:positiveInteger { minInclusive = "1" maxInclusive = "31" }
  }

## Wurzelelement für Dozentenliste
dozentenliste =
  element dozentenliste {
    common.attributes,
    universität,
    element dozent {
      common.attributes,
      element name { nachname, vorname?, nachnamenpräfix? },
      geboren?,
      gestorben?,
      
      ## PND-Nummer
      element pnd {
        xsd:token { pattern = "[0-9]{8}[0-9X]" }
      }?,
      (element absatz { text }*
       & element url { http-url }*)
    }+
  }
eckdaten =
  partial-date,
  element ort { text }?
geboren = element geboren { eckdaten }
gestorben = element gestorben { eckdaten }
http-url = xsd:anyURI { pattern = "https?://.+" }

## Container für OCR-Text
ocr =
  element ocr {
    attribute xml:space { "preserve" }
    & (sachgruppe
       | veranstaltung
       | veranstaltungsgruppe
       | veranstaltungsverweis
       | absatz
       | trennlinie
       | seite)*
    & text
  }
  >> s:pattern [
       id = "ocr"
       "\x{a}" ~
       "      "
       s:rule [
         context = "/v:vv[v:kopf/v:status/@komplett]/v:ocr"
         "\x{a}" ~
         "        "
         s:assert [
           test = "false()"
           "\x{a}" ~
           "          Ein komplett transkribiertes Verzeichnis darf kein\x{a}" ~
           "          ocr-Element mehr enthalten.\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
       "\x{a}" ~
       "    "
     ]
s:pattern [
  id = "nonempty-elements"
  "\x{a}" ~
  "    "
  s:rule [
    context =
      "v:nachname | v:vorname | v:nachnamenpräfix |                      v:funktion | v:grad | v:ders |                      v:thema | v:gebühr | v:modus | v:zeit | v:ort |                      v:siehe | v:scil | v:sic | v:notiz"
    "\x{a}" ~
    "      "
    s:assert [
      test = "not(text()='' or normalize-space(.)='')"
      "\x{a}" ~
      "        Dieses Element darf nicht leer sein.\x{a}" ~
      "      "
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "  "
]
s:pattern [
  id = "fakultäten"
  "\x{a}" ~
  "    "
  s:rule [
    context = "v:vv[v:kopf/v:status/@komplett='ja']"
    "\x{a}" ~
    "      "
    s:assert [
      test = "count(//v:sachgruppe/@fakultät) = 4"
      "\x{a}" ~
      "        Es muss vier Fakultätssachgruppen geben.\x{a}" ~
      "      "
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "    "
  s:rule [
    context = "v:sachgruppe[@fakultät]"
    "\x{a}" ~
    "      "
    s:assert [
      test = "not(ancestor::v:sachgruppe[@fakultät])"
      "\x{a}" ~
      "        Fakulätssachgruppen können nicht verschachtelt sein.\x{a}" ~
      "      "
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "  "
]
